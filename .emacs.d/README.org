#+STARTUP: showall
#+FILETAGS: sideproject yak
#+CATEGORY: Emacs
* Emacs
** Package management
*** use-package
:PROPERTIES:
:ID:       AE1E02B7-5BDD-4AA8-9BB0-EB14DD8A3F10
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(setq straight-use-package-by-default t)
#+END_SRC
*** el-patch
:PROPERTIES:
:ID:       A1C4B92C-B2DD-488C-B56E-D0B42EE184B5
:END:
Allows for patching functions in packages.
#+begin_src emacs-lisp :tangle yes
(use-package el-patch)
#+end_src
*** Dash
:PROPERTIES:
:ID:       B4BFD98E-DB93-42CE-A26D-A9AAE12F5610
:END:
List library that comes in handy.
#+begin_src emacs-lisp :tangle yes
(use-package dash)
#+end_src
*** Updating
:PROPERTIES:
:ID:       00B93982-A2E5-4AEA-BEA0-3D0E38F2B443
:END:
#+begin_src emacs-lisp :tangle yes
(defun sulami/update-packages ()
  "Prunes and updates packages, revalidates patches."
  (straight-prune-build-directory)
  (straight-pull-all)
  (el-patch-validate-all)
  (straight-freeze-versions))
#+end_src
** Full screen if requested
When "-fullscreen" is passed as a command line argument to emacs, set
the frame size and position. Useful when starting emacs without a
window manager for a quiet writing experience.

#+begin_src emacs-lisp :tangle yes
(add-to-list
 'command-switch-alist
 '("-fullscreen" . (lambda (x)
                    (let ((frame-resize-pixelwise t))
                      (set-frame-size (selected-frame) (x-display-pixel-width) (x-display-pixel-height) t)
                      (set-frame-position (selected-frame) 0 0)))))
#+end_src
** Better defaults
*** Use lexical binding in this file
:PROPERTIES:
:ID:       5977F74F-C94D-433A-8A43-F1F915CDF234
:END:
This org-mode file gets built into an elisp file, and we want this comment at
the top for performance reasons.
#+BEGIN_SRC emacs-lisp :tangle yes
;; -*- lexical-binding: t; -*-
#+END_SRC
*** Discard the custom file
:PROPERTIES:
:ID:       A50DD048-EA7B-47B4-B394-82DAE0CF30E4
:END:
~custom.el~ is hidden state, all config is declarative.
#+BEGIN_SRC emacs-lisp :tangle yes
(setq custom-file (make-temp-file ""))
#+END_SRC
*** Hide Backups
:PROPERTIES:
:ID:       7AE47BD6-7C0A-47A3-8CCE-394C56717281
:END:
This way we lose everything backups if the whole machine crashes, but
we don't accidentally leave backups around.
#+BEGIN_SRC emacs-lisp :tangle yes
(setq backup-directory-alist '(("." . "/tmp/"))
      auto-save-file-name-transforms '((".*" "/tmp/" t))
      create-lockfiles nil
)
#+END_SRC
*** No trash
:PROPERTIES:
:ID:       1D22CEA4-83FE-4336-ADE2-D28DD72417E0
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(setq delete-by-moving-to-trash nil)
#+END_SRC
*** Remember recent files
:PROPERTIES:
:ID:       DAA04738-8487-4CDA-8B65-9B4E564979DD
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(when (require 'recentf)
  (recentf-mode 1)
  (setq recentf-max-saved-items 255))
#+END_SRC
*** Be quiet on startup
:PROPERTIES:
:ID:       F547F033-BB82-4245-8B65-8D6B854AA1BB
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(setq inhibit-splash-screen t
      inhibit-startup-screen t
      inhibit-startup-message t)
#+END_SRC
*** Don't tell me about keybindings
:PROPERTIES:
:ID:       C7979033-3406-4683-8A7B-708601ACF365
:END:
#+begin_src emacs-lisp :tangle yes
(setq suggest-key-bindings nil)
#+end_src
*** Make Tramp great again
:PROPERTIES:
:ID:       46B2BA79-28C7-439E-8CF9-991E1260E6C4
:END:
#+begin_src emacs-lisp :tangle yes
(setq tramp-default-method "ssh"
      tramp-ssh-controlmaster-options
      "-o ControlMaster=auto -o ControlPath='tramp.%%C'")

;; Various speedups
;; from https://www.gnu.org/software/emacs/manual/html_node/tramp/Frequently-Asked-Questions.html
(setq remote-file-name-inhibit-cache 3600
      tramp-completion-reread-directory-timeout nil
      vc-ignore-dir-regexp (format "%s\\|%s"
                                   vc-ignore-dir-regexp
                                   tramp-file-name-regexp)
      tramp-verbose 0)

;; Disable the history file on remote hosts
(setq tramp-histfile-override t)

;; Save backup files locally
;; from https://stackoverflow.com/a/47021266
(add-to-list 'backup-directory-alist
             (cons tramp-file-name-regexp "/tmp/emacs-backup/"))
#+end_src
*** Remember where we were
:PROPERTIES:
:ID:       0764766F-A7C7-4B18-A1FA-CF950FA3ACA5
:END:
#+begin_src emacs-lisp :tangle yes
(require 'saveplace)
(save-place-mode 1)
#+end_src
*** Don't ring the bell
:PROPERTIES:
:ID:       C9A34DAD-D407-4EC7-83D0-524364A25F64
:END:
#+begin_src emacs-lisp :tangle yes
(setq ring-bell-function 'ignore)
#+end_src
*** Start the scratch buffer empty
:PROPERTIES:
:ID:       C11395A3-E82C-448C-B87C-B4C8CF2C5A03
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(setq initial-scratch-message "")
#+END_SRC
*** Default to Elisp
:PROPERTIES:
:ID:       176181A7-BDCC-454B-A55E-BE1A79CE2E4D
:END:
#+begin_src emacs-lisp :tangle yes
(setq initial-major-mode 'emacs-lisp-mode)
#+end_src
*** Switch to the help window
:PROPERTIES:
:ID:       B0E03991-C291-45E5-8C11-080BBA7FAB3A
:END:
#+begin_src emacs-lisp :tangle yes
(setq help-window-select t)
#+end_src
*** Spaces > tabs
:PROPERTIES:
:ID:       8F7B1293-B88E-4D7A-8CC3-5E928155EB77
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(setq-default indent-tabs-mode nil)
#+END_SRC
*** Sentences end with a single space
:PROPERTIES:
:ID:       0F28CA60-7797-444F-ADFB-5DDE517D1AE1
:END:
#+begin_src emacs-lisp :tangle yes
(setq sentence-end-double-space nil)
#+end_src
*** Show trailing whitespace
:PROPERTIES:
:ID:       0BC788A0-1275-42B8-8867-3D6C7D4C5211
:END:
It's disabled by default, and then gets enabled for all file-based
buffer modes, so not for REPLS and shells.
#+BEGIN_SRC emacs-lisp :tangle yes
(setq-default show-trailing-whitespace nil)
(defun sulami/show-trailing-whitespace ()
  "Just sets `show-trailing-whitespace'."
  (setq show-trailing-whitespace t))
(add-hook 'prog-mode-hook 'sulami/show-trailing-whitespace)
(add-hook 'text-mode-hook 'sulami/show-trailing-whitespace)
#+END_SRC
*** Show empty lines
:PROPERTIES:
:ID:       B48C16C0-389F-4120-A34B-9821754BCA8F
:END:
This shows vim-style tildes on the left fringe.
#+begin_src emacs-lisp :tangle yes
(setq-default indicate-empty-lines t)
(define-fringe-bitmap 'tilde [0 0 0 113 219 142 0 0] nil nil 'center)
(setcdr (assq 'empty-line fringe-indicator-alist) 'tilde)
#+end_src
*** Highlight matching parens
:PROPERTIES:
:ID:       754C7114-0F9E-42EF-A11E-16D4024AAEE4
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(show-paren-mode 1)
#+END_SRC
*** Scrolling
:PROPERTIES:
:ID:       489BCBD1-941A-43E0-B89C-76A832EDC11D
:END:
These settings were lifted off the internet™ and make scrolling with pointing
devices feel more reasonable.
#+BEGIN_SRC emacs-lisp :tangle yes
(setq mouse-wheel-progressive-speed nil
      mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
#+END_SRC
*** No line wrapping
:PROPERTIES:
:ID:       1617ABB0-C887-4B69-BFEF-45051B6263CA
:END:
At least as a default, much nicer when resizing windows.
#+BEGIN_SRC emacs-lisp :tangle yes
(set-default 'truncate-lines t)
(setq line-move-visual nil)
#+END_SRC
*** UTF-8
:PROPERTIES:
:ID:       D90B60CF-6182-4720-8851-05B095E06173
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(setq-default buffer-file-coding-system 'utf-8)
(setenv "LANG" "en_be.UTF-8")
(prefer-coding-system 'utf-8)
#+END_SRC
*** Spelling
:PROPERTIES:
:ID:       0F5826C0-34EC-47A9-909B-84CBEA066920
:END:
Use ~aspell~ with British English.
#+BEGIN_SRC emacs-lisp :tangle yes
(setq ispell-program-name "aspell"
      ispell-extra-args (quote ("--sug-mode=ultra" "--lang=en_GB-ise")))
#+END_SRC
*** Enable erase buffer
:PROPERTIES:
:ID:       673B84BD-A10B-487F-9B59-7AA2A70AAECB
:END:
#+begin_src emacs-lisp :tangle yes
(put 'erase-buffer 'disabled nil)
#+end_src
*** Y/N for yes or no questions
:PROPERTIES:
:ID:       FB402A23-037D-4BC8-8092-11B2C7869DDE
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Ask before exiting
:PROPERTIES:
:ID:       A314A8CA-56BF-4BA9-ADF0-3FE4128337BF
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(setq confirm-kill-emacs 'yes-or-no-p)
#+END_SRC
*** Frame title
:PROPERTIES:
:ID:       9A58DA7E-C982-41EA-AC16-CD574EDF7F4E
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(setq frame-title-format
      (list :eval '(let ((p-name (projectile-project-name)))
		     (if (string-equal p-name "-")
			 "Emacs"
		       (concat "Emacs - " p-name)))))
#+END_SRC
*** Disable all the GUI
:PROPERTIES:
:ID:       46CF54E1-2BCF-49D1-8A1A-9BB6AB852FE1
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(if (and (fboundp 'tool-bar-mode)
         tool-bar-mode)
    (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tooltip-mode) (tooltip-mode -1))
#+END_SRC
*** Tab width
#+begin_src emacs-lisp :tangle yes
(setq tab-width 2)
#+end_src
** Tabs
My team (and Golang) made me

#+begin_src emacs-lisp :tangle yes
(setq custom-tab-width 2)
(setq js-indent-level 2)

(defun pfif/disable-tabs ()
 (interactive)
 (setq indent-tabs-mode nil)
 (setq indent-tabs-mode (default-value indent-tabs-mode)))
(defun pfif/enable-tabs  ()
  (interactive)
  (local-set-key (kbd "TAB") 'tab-to-tab-stop)
  (setq indent-tabs-mode t)
  (setq tab-width custom-tab-width))
#+end_src
** macOS
Everything in here relates to macOS in some way.
*** Swap the modifier keys
:PROPERTIES:
:ID:       7C80C5E8-3A38-46DE-A5A0-DEDCDA8D87A4
:END:
The MacPorts build I'm using swaps the modifiers from what I'm used to, so I'm
swapping them back.
#+BEGIN_SRC emacs-lisp :tangle yes
(setq mac-command-modifier 'super
      mac-option-modifier 'meta)
#+END_SRC
*** Fix paste
:PROPERTIES:
:ID:       6916C70F-B2A2-462E-93E3-8A5038B99DD1
:END:
Especially Alfred likes to paste with ~⌘-v~, so that needs to work.
#+BEGIN_SRC emacs-lisp :tangle yes
(define-key global-map (kbd "s-v") 'yank)
#+END_SRC
*** Fullscreen with ⌘-Return
:PROPERTIES:
:ID:       96C23754-EF1A-46C7-A583-9705ED9DACBD
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(define-key global-map (kbd "<s-return>") 'toggle-frame-fullscreen)
#+END_SRC
*** Mac font panel
:PROPERTIES:
:ID:       191CB1DB-C53D-41F6-90E2-498F51F6B9A2
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(define-key global-map (kbd "s-t") 'mac-font-panel-mode)
#+END_SRC
*** Add all packages from PATH
:PROPERTIES:
:ID:       C2575BB8-44AD-4F78-81D9-609C18A8F5E4
:END:
#+begin_src emacs-lisp :tangle yes
(defun sanityinc/set-exec-path-from-shell-PATH ()
  "Set up Emacs' `exec-path' and PATH environment variable to match that used by the user's shell.

This is particularly useful under Mac OSX, where GUI apps are not started from a shell."
  (interactive)
  (let ((path-from-shell (replace-regexp-in-string "[ \t\n]*$" "" (car (last (split-string (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'") "\n" t))))))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))
(sanityinc/set-exec-path-from-shell-PATH )

(defun pfif/set_environment_variables_from_shell ()
  (let ((environment-variables (--> (shell-command-to-string "$SHELL --login -i -c 'env'")
                                    (split-string it "\n")
                                    (-filter (lambda (str) (string-match "=" str)) it) ;; weak attempt at weeding out stuff in stdin before the actual env output
                                    (-filter (lambda (str) (not (string-equal "" str))) it)
                                    (-map (lambda (str)
                                            (let ((equal-position (string-match "=" str)))
                                              (cons
                                               (substring str 0 equal-position)
                                               (substring str (+ equal-position 1)))))
                                          it)
                                    )))
    (-each environment-variables (lambda (env_tuple)
                                   (setenv (car env_tuple) (cdr env_tuple))))))

(pfif/set_environment_variables_from_shell)

#+end_src
*** Allowing british keyboard to input #
#+begin_src emacs-lisp :tangle yes
(setq ns-right-alternate-modifier 'none)
#+end_src
** Appearance
*** Font
:PROPERTIES:
:ID:       F3763F98-E55F-4D6C-9AC2-E5EAC3B22756
:END:
Set the font to Fira Code and enable ligatures.
#+BEGIN_SRC emacs-lisp :tangle yes
(add-to-list 'default-frame-alist '(font . "Fira Code 14"))
#+END_SRC
*** Theme
:PROPERTIES:
:ID:       64FEA12B-181D-42FB-95ED-568B495C3FE4
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
;; I like to live dangerously
(setq custom-safe-themes t)

(defun sulami/disable-all-themes ()
  "Disables all custom themes."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(defun sulami/before-load-theme-advice (theme &optional no-confirm no-enable)
  "Disable all themes before loading a new one.

Prevents mixing of themes, where one theme doesn't override all faces
of another theme."
  (sulami/disable-all-themes))

(advice-add 'load-theme
            :before
            #'sulami/before-load-theme-advice)

(defun sulami/after-load-theme-advice (theme &optional no-confirm no-enable)
  "Unsets backgrounds for some org-mode faces."
  (set-face-background 'outline-1 nil)
  (set-face-background 'org-block nil)
  (set-face-background 'org-block-begin-line nil)
  (set-face-background 'org-block-end-line nil)
  (set-face-background 'org-quote nil))

(advice-add 'load-theme
            :after
            #'sulami/after-load-theme-advice)

(defun pfif/refresh-theme ()
  (interactive)
  (let ((hour-of-day (read (format-time-string "%H"))))
    (if (<= 8 hour-of-day 17)
        (load-theme 'doom-solarized-light t)
      (load-theme 'doom-moonlight t))))

(use-package doom-themes
  :after (dash)
  :init
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  :config
  (doom-themes-org-config)
  ;; Set the default colourscheme according to the time of day
  :hook (after-init . pfif/refresh-theme))
#+END_SRC
*** All the icons
:PROPERTIES:
:ID:       DB2BDD7F-8BF0-4B45-B614-EEE3F599B9FA
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package all-the-icons
  :defer t)

(use-package all-the-icons-dired
  :defer t
  :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC
*** Modeline
:PROPERTIES:
:ID:       C548B79A-B947-4BDC-87D8-EC6EEC97EB30
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :config
  (setq doom-modeline-modal-icon nil
        doom-modeline-buffer-file-name-style 'relative-to-project
        doom-modeline-buffer-encoding nil
        doom-modeline-persp-name nil
        doom-modeline-vcs-max-length 36))
#+END_SRC
** General
:PROPERTIES:
:ID:       BDA0F484-3FE7-41C9-80AB-49FF1407BDBC
:END:
General allows me to use fancy prefix keybindings.

I'm using a spacemacs-inspired system of a global leader key and a local leader
key for major modes. Bindings are setup in the respective ~use-package~
declarations.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package general
  :config
  (general-auto-unbind-keys)
  (general-evil-setup)
  (defconst leader-key "SPC")
  (general-create-definer leader-def
    :prefix leader-key
    :keymaps 'override
    :states '(normal visual motion))
  (defconst local-leader-key ",")
  (general-create-definer local-leader-def
    :prefix local-leader-key
    :keymaps 'local
    :states '(normal visual))
  (leader-def
    "" '(nil :wk "my lieutenant general prefix")
    ;; Prefixes
    "a" '(:ignore t :wk "app")
    "b" '(:ignore t :wk "buffer")
    "f" '(:ignore t :wk "file")
    "f e" '(:ignore t :wk "emacs")
    "g" '(:ignore t :wk "git")
    "h" '(:ignore t :wk "help")
    "j" '(:ignore t :wk "jump")
    "k" '(:ignore t :wk "lisp")
    "l" '(:ignore t :wk "lsp")
    "p" '(:ignore t :wk "project/perspective")
    "s" '(:ignore t :wk "search")
    "t" '(:ignore t :wk "toggle")
    "w" '(:ignore t :wk "window")
    ;; General keybinds
    "SPC" 'counsel-M-x
    "\\" 'indent-region
    "|" 'sulami/shell-command-on-region
    "a a" 'org-agenda
    "a c" 'org-capture
    "a C" 'calc
    "a i" 'sulami/open-org-inbox
    "a s" 'shell
    "a t" 'ansi-term
    "b e" 'erase-buffer
    "b d" 'kill-this-buffer
    "b m" 'sulami/open-message-buffer
    "b r" 'sulami/rename-file-and-buffer
    "b s" 'sulami/open-scratch-buffer
    "b y" 'sulami/copy-buffer
    "f e e" 'sulami/open-emacs-config
    "f e r" 'sulami/reload-emacs-config
    "f d" 'dired
    "f D" 'sulami/delete-file-and-buffer
    "f R" 'sulami/rename-file-and-buffer
    "h d" 'describe-symbol
    "h f" 'describe-function
    "h g" 'general-describe-keybindings
    "h l" 'view-lossage
    "h v" 'describe-variable
    "p w" 'pfif/switch-to-local-tasklist
    "p q" 'pfif/switch-to-tasklist
    "p t" 'pfif/switch-to-local-toolkit
    "t l" 'toggle-truncate-lines
    "t r" 'refill-mode
    "t s" 'flyspell-mode
    "t n" 'linum-mode
    "t N" 'sulami/toggle-narrow
    "w =" 'balance-windows
    "w m" 'sulami/toggle-maximise-window
    "z" (lambda () (interactive)
          (org-id-update-id-locations)
          (find-file "~/Dropbox/ost-tasklist/zettlekasten.org"))
    "v" 'vterm
    )
  (general-define-key
   "s-m" 'suspend-frame
   "s-=" (lambda () (interactive) (text-scale-increase 0.5))
   "s--" (lambda () (interactive) (text-scale-decrease 0.5))
   "s-0" (lambda () (interactive) (text-scale-increase 0)))

  (defun pfif/org-clock-report ()
    (interactive)
    (org-clock-report)
    (pfif/compute-remaining-time-for-today)
    )

  ;; Org mode
  (local-leader-def
    :keymaps 'org-mode-map
    :states '(normal)
    "a" 'org-agenda
    "d" 'org-deadline
    "f" 'org-fill-paragraph
    "l" '(:ignore t :wk "link")
    "l l" 'org-insert-link
    "l v" 'pfif/org-attach-vlc-screencap
    "r" '(org-refile :wk "org-refile")
    "s" 'org-schedule
    "S" 'org-babel-switch-to-session
    "c" 'org-clock-update-time-maybe
    "C" 'pfif/org-clock-report
    )
  ;; Dired
  (general-define-key
   :keymaps 'dired-mode-map
   "<return>" 'dired-find-alternate-file))
#+END_SRC
** Evil
:PROPERTIES:
:ID:       ABF34328-B753-4AFB-8B3D-F7980D624C2A
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil
  :init
  (setq evil-want-C-u-scroll t
        evil-want-C-i-jump t
        evil-want-Y-yank-to-eol t
        evil-want-keybinding nil)
  :custom
  (evil-undo-system 'undo-fu)
  :config
  ;; This conflicts with the local leader
  (unbind-key "," evil-motion-state-map)

  (defun sulami/evil-set-jump-wrapper (cmd)
    "Wraps a general command to call `evil-set-jump' before."
    (let ((cmd-name (symbol-name cmd)))
      `((lambda (&rest rest)
          (interactive)
          (evil-set-jump)
          (apply (quote ,cmd) rest))
        :wk ,cmd-name)))

  (defun sulami/evil-shift-left-visual ()
    "`evil-shift-left`, but keeps the selection."
    (interactive)
    (call-interactively 'evil-shift-left)
    (evil-normal-state)
    (evil-visual-restore))

  (defun sulami/evil-shift-right-visual ()
    "`evil-shift-right`, but keeps the selection."
    (interactive)
    (call-interactively 'evil-shift-right)
    (evil-normal-state)
    (evil-visual-restore))

  :general
  (leader-def
   "TAB" 'evil-switch-to-windows-last-buffer
   "<tab>" 'evil-switch-to-windows-last-buffer
   "w d" 'evil-window-delete
   "w /" 'evil-window-vsplit
   "w -" 'evil-window-split)
  (general-vmap
    ">" 'sulami/evil-shift-right-visual
    "<" 'sulami/evil-shift-left-visual)
  :hook (after-init . evil-mode))

(use-package evil-collection
  :after (evil)
  :config
  (setq evil-collection-mode-list
        (delete 'company evil-collection-mode-list))
  (evil-collection-init)
  )

(use-package evil-org
  :after org
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys)


  ;; A macro to insert timestamps
  (fset 'pfif/insert-timestamps
      (kmacro-lambda-form [tab ?j ?$ ?a return ?\C-c ?. return escape ?\s-2] 0 "%d"))

  (defun pfif/org-agenda-schedule-today ()
    (interactive)
    (org-agenda-schedule nil "+0")
    )
  (general-define-key
   :states 'motion
   :keymaps 'org-agenda-mode-map
   "m" 'pfif/insert-timestamps
   "v" 'pfif/org-agenda-schedule-today
   )
  :hook ((org-mode . evil-org-mode)))

(use-package evil-search-highlight-persist
  :config
  (defun sulami/isearch-nohighlight ()
    "Remove search highlights if not in the isearch minor mode."
    (interactive)
    (when (not isearch-mode)
      (evil-search-highlight-persist-remove-all)))
  :general
  (general-nmap "RET" 'sulami/isearch-nohighlight)
  :hook (evil-mode . global-evil-search-highlight-persist))

(use-package evil-commentary
  :hook (evil-mode . evil-commentary-mode))

(use-package evil-surround
  :hook (evil-mode . global-evil-surround-mode))
#+END_SRC
** Org mode
*** Default directory
:PROPERTIES:
:ID:       7F1408F8-6BE2-45E1-AC8A-7DEAEA8BF0E1
:END:
#+begin_src emacs-lisp :tangle yes
(setq org-directory "~/local_tasklist/")
#+end_src
*** Plain source code blocks
:PROPERTIES:
:ID:       CCE9D958-D042-4108-B066-FBE9B8D8361A
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-src-preserve-indentation nil
      org-edit-src-content-indentation 0)
#+END_SRC
*** Open source code blocks in the same window
:PROPERTIES:
:ID:       B8664A05-C820-438C-8F09-293F34E7FC84
:END:
#+begin_src emacs-lisp :tangle yes
(setq org-src-window-setup 'current-window)
#+end_src
*** Enable babel for more languages
:PROPERTIES:
:ID:       2EC3A7E7-3ECF-414E-A971-48B25ACC2C58
:END:
#+begin_src emacs-lisp :tangle yes
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (shell . t)
   (python . t)
   (clojure . t)))
#+end_src
*** Use drawers for source block evaluation
:PROPERTIES:
:ID:       63A65029-EA75-4890-B8A3-59867691FA9D
:END:
#+begin_src emacs-lisp :tangle yes
(add-to-list 'org-babel-default-header-args '(:results . "replace drawer"))
#+end_src
*** Disable ligatures in org-mode
:PROPERTIES:
:ID:       6C4A2EB5-0CDE-496F-970E-A6686844450C
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'org-mode-hook
          (lambda ()
            (auto-composition-mode -1)))
#+END_SRC
*** Show emphasis markers
:PROPERTIES:
:ID:       7134234C-6906-47C9-B7CF-EF67696850F3
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-hide-emphasis-markers nil)
#+END_SRC
*** Indent-mode
:PROPERTIES:
:ID:       623A169F-1D5A-4D39-B9FE-ECA86AE92902
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-indent-indentation-per-level 1)
(add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
*** Enable spell checking
:PROPERTIES:
:ID:       CD02899B-0955-4069-B111-0EE7165C1FE9
:END:
#+begin_src emacs-lisp :tangle yes
;(add-hook 'org-mode-hook 'flyspell-mode)
#+end_src
*** Archive into a shared file
:PROPERTIES:
:ID:       ABF2C9AF-4F79-44F8-9A70-C230099DABD2
:END:
#+begin_src emacs-lisp :tangle yes
(setq org-archive-location "archive.org::")
#+end_src
*** Agenda
:PROPERTIES:
:ID:       7E916C48-EA8F-4C19-BC9E-CF9EBD5C908C
:END:
#+begin_src emacs-lisp :tangle yes
(require 'seq)
(require 'evil)
(require 'org)
(use-package org-super-agenda
  :init
  (org-super-agenda-mode)
  :config
  (setq org-super-agenda-groups '((:name "Tasks"
                                         :and (:todo t
                                         :tag "bulletjournal"))
                                  (:name "Ranting"
                                        :tag "ranting")
                                  (:name "Thoughts"
                                         :and (:not (:todo t)
                                         :tag "bulletjournal"))))
  ;; Remap org-super-agenda-header-map to 'org-agenda-mode-map, so that it takes the modification from evil-org
  (setq org-super-agenda-header-map 'org-agenda-mode-map)
)
(setq
 org-agenda-files (seq-filter
                   'file-exists-p
                   '("~/local_tasklist/bullet_journal.org"
                     "~/local_tasklist/ranting.org"
                     "~/Dropbox/ost-tasklist/"
                     ))
 org-agenda-sorting-strategy '((agenda habit-down time-up scheduled-up priority-down category-keep)
                               (todo priority-down category-keep)
                               (tags priority-down category-keep)
                               (search category-keep)))


(setq org-agenda-custom-commands '(("b" "Bullet Journal"
                                    ((agenda "" ((org-agenda-span 1)))
                                     (search "timetrackingregular")
                                     (tags-todo "jason11")
                                     ))))

#+end_src
*** Capture
:PROPERTIES:
:ID:       899E35F9-4D7D-4629-AA40-2E79F6581561
:END:
#+begin_src emacs-lisp :tangle yes
(setq org-capture-templates
      '(
        ("b" "Bullet journal")
        ("bs" "思考" entry
         (file "bullet_journal.org")
         "* %?\n%t")
        ("bt" "Task" entry
         (file "bullet_journal.org")
         "* TODO %?\n%t")
        ("br" "Ranting" entry
         (file "ranting.org")
         "* %?\n%t")
        ("z" "Zettlekasten")
        ("zz" "New entry" entry
         (file "~/Dropbox/ost-tasklist/zettlekasten.org")
         "* %^{Entry title} %^G\n%t\n%?\n\nSources:\n-\n\nLinks:\n-")
        ("c" "CBT" entry
         (file "cbt.org")
         "* %t\n** Automatic throughts\n*** TODO I am afraid that ...%?\n*** TODO I am unhappy because ...\n** Bundle X\n*** Automatic thoughts\n*** Facts that support\n*** Facts that do not support\n*** Balanced view"
         :jump-to-captured t
         )))
#+end_src
*** Refile
:PROPERTIES:
:ID:       2F4D0ED3-3080-4312-9640-B411F88BC5E7
:END:
This allows me to refile from the GTD inbox to the top-level of a file.
#+begin_src emacs-lisp :tangle yes
(setq org-refile-targets '(
                           ("~/local_tasklist/bullet_journal.org" :todo . "TODO")
                           ("~/local_tasklist/bullet_journal.org" :tag . "timetrackingregular")
                           )
      org-refile-use-outline-path nil)
#+end_src
*** Open the inbox
:PROPERTIES:
:ID:       77B55E5E-7A7F-44AD-A7BE-419A1472DF61
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(defun sulami/open-org-inbox ()
  "Opens the inbox file."
  (interactive)
  (find-file "~/Documents/Notes/inbox.org"))
#+END_SRC
*** Calendar
:PROPERTIES:
:ID:       C2CCB36D-39E8-49C4-952B-2497437E89A2
:END:
Weeks start on Monday, and who thought MDY was a good idea?
#+BEGIN_SRC emacs-lisp :tangle yes
(setq calendar-week-start-day 1
      calendar-date-style 'iso)
#+END_SRC
*** TODO org-jira
:PROPERTIES:
:ID:       82C0B98D-D3BC-4C6E-8AFB-68897D8E7385
:END:
#+begin_src emacs-lisp :tangle yes
(use-package org-jira
  :disabled)
#+end_src
*** Do not add note when repeating tasks
:PROPERTIES:
:ID:       9A4DA4DD-B921-4906-BF0A-0D5DAA1CC518
:END:
#+begin_src emacs-lisp :tangle yes
(setq org-log-repeat nil)
#+end_src
*** Switch to buffers
:PROPERTIES:
:ID:       8C0465C4-B7B1-41CB-8CAF-A0F9B6D957AC
:END:
#+begin_src emacs-lisp :tangle yes
(defun pfif/switch-to-tasklist ()
    (interactive)
    (persp-switch "~/Dropbox/ost-tasklist/")
    (find-file "~/Dropbox/ost-tasklist/cleaning.org"))

(defun pfif/switch-to-local-tasklist ()
    (interactive)
    (let ((persp-reset-windows-on-nil-window-conf t))
      (persp-switch "~/local_tasklist/")
      (find-file "~/local_tasklist/bullet_journal.org")
      (org-agenda "" "b"))
    )

(defun pfif/switch-to-local-toolkit ()
    (interactive)
    (let ((persp-reset-windows-on-nil-window-conf t))
      (persp-switch "~/local_tasklist/")
      (find-file "~/local_tasklist/tools.org"))
    )
#+end_src
*** http request in org-mode
:PROPERTIES:
:ID:       76493A7F-4330-4198-AD2D-CB7F940045AB
:END:
Naturally, this is a thing :D

#+begin_src emacs-lisp :tangle yes
(use-package verb
  :defer t
  :general
  (local-leader-def
    :keymaps 'org-mode-map
    "h" '(:ignore t :wk "http")
    "h s" 'verb-send-request-on-point-other-window-stay
    "h S" 'verb-send-request-on-point-other-window
    "h q" 'verb-send-request-on-point-no-window
    "h r" 'verb-re-send-request
    "h v" 'verb-set-var
    "h y" 'verb-export-request-on-point)
  (general-nmap
    :keymaps 'verb-response-body-mode-map
    "q" 'verb-kill-response-buffer-and-window))
#+end_src
*** Links
**** COMMENT Show backlink
:PROPERTIES:
:ID:       24B10028-7844-4E3C-9D8E-8EB14B4A3DD7
:END:
#+begin_src emacs-lisp :tangle yes
(use-package org-backlink
  :straight (org-backlink
             :repo "codecoll/org-backlink"
             :host github
             :fork (:host github
                          :repo "pfif/org-backlink"))
  :config
  (setq org-backlink-mode-files '("~/Dropbox/ost-tasklist/zettlekasten.org"))
  :hook (org-mode . org-backlink-mode)
  :general
  (local-leader-def
    :keymaps 'org-mode-map
    "b" '(:ignore t :wk "backlink")
    "b e" (lambda ()
            (interactive)
            (org-id-update-id-locations)
            (org-backlink-mode-refresh-cache)
            ))
  )
#+end_src
**** Add an id when creating a link
:PROPERTIES:
:ID:       941D2B5E-8B53-4B32-B7AC-9C028A890154
:END:
#+begin_src emacs-lisp :tangle yes
(setq org-id-link-to-org-use-id t)
#+end_src
*** Change image size
:PROPERTIES:
:ID:       03065da5-0d57-45d2-b79a-43ccd33dd34e
:END:
I tend to save huge image in my Zettlekasten that are too big for my screen. This make sure they resized when shown in org-mode.
#+begin_src emacs-lisp :tangle yes
(setq org-image-actual-width 600)
#+end_src
*** Attach
:PROPERTIES:
:ID:       5e10325c-3dff-4153-b855-b46b3d848981
:END:
#+begin_src emacs-lisp :tangle yes
(defun pfif/org-attach-vlc-screencap ()
  (interactive)
  (let ((pictures (->> (directory-files "~/Pictures/")
                       (seq-filter (lambda (filename) (string-prefix-p "vlc" filename)))))
        (org-attach-method 'mv))
    (-each pictures
      (lambda (filename)
        (org-attach-attach (concat "~/Pictures/" filename))
        (org-insert-link "attachement" (concat "attachment:"filename))
        (insert "\n")))
    )

  )
#+end_src
*** Clock
#+begin_src emacs-lisp :tangle yes
(defun pfif/compute-remaining-time-for-today ()
  (interactive)
  (let* ((today-time (->> (org-clock-get-table-data "" '(:block today))
                         (nth 1)))
         (remaining-time (- 480 today-time)))
    (message (org-duration-from-minutes remaining-time)))
)
#+end_src
** Custom functions
*** Config
**** Open this file
:PROPERTIES:
:ID:       777987F0-B871-4DE6-8942-73461908AC2D
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(defun sulami/open-emacs-config ()
  "Opens the config file for our favourite OS."
  (interactive)
  (persp-switch "~/.emacs.d/")
  (find-file sulami/emacs-config-file))
#+END_SRC
**** Reload this file
:PROPERTIES:
:ID:       B6D23632-F233-41AD-9E90-F177D0C00AFA
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(defun sulami/reload-emacs-config ()
  "Loads the config file for our favourite OS."
  (interactive)
  (org-babel-load-file sulami/emacs-config-file))
#+END_SRC
*** Buffers
**** Rename buffer file
:PROPERTIES:
:ID:       DB6D522C-BB97-4E13-AA05-8C592B18FB3F
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(defun sulami/rename-file-and-buffer ()
  "Rename the current buffer and file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (message "Buffer is not visiting a file!")
      (let ((new-name (read-file-name "New name: " filename)))
        (cond
         ((vc-backend filename) (vc-rename-file filename new-name))
         (t
          (rename-file filename new-name t)
          (set-visited-file-name new-name t t)))))))
#+END_SRC
**** Switch to buffer shortcuts
:PROPERTIES:
:ID:       F6A69FEA-5A32-4709-9471-A0DC7A94003C
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(defun sulami/open-scratch-buffer ()
  "Open the scratch buffer."
  (interactive)
  (switch-to-buffer "*scratch*"))

(defun sulami/open-message-buffer ()
  "Open the message buffer."
  (interactive)
  (switch-to-buffer "*Messages*"))
#+END_SRC
**** Buffer line count
:PROPERTIES:
:ID:       FA79CF56-E886-48C8-9EB0-2DBB02D897BD
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(defun sulami/buffer-line-count ()
  "Get the number of lines in the active buffer."
  (count-lines 1 (point-max)))
#+END_SRC
**** Delete buffer file
:PROPERTIES:
:ID:       2BB7F9EC-0D37-4054-AE94-91FC0403CADA
:END:
#+begin_src emacs-lisp :tangle yes
(defun sulami/delete-file-and-buffer ()
  "Deletes a buffer and the file it's visiting."
  (interactive)
  (when-let* ((file-name (buffer-file-name))
              (really (yes-or-no-p (format "Delete %s? "
                                           file-name))))
    (delete-file file-name)
    (kill-buffer)))
#+end_src
**** Copy buffer
:PROPERTIES:
:ID:       E528984C-6E4F-4101-A947-8FEE82C54A1A
:END:
#+begin_src emacs-lisp :tangle yes
(defun sulami/copy-buffer ()
  "Copies the entire buffer to the kill-ring."
  (interactive)
  (copy-region-as-kill 1 (point-max)))
#+end_src
*** Windows
**** Maximise a window
:PROPERTIES:
:ID:       8F8F5482-A48C-4371-8784-099D82F9FF07
:END:
#+begin_src emacs-lisp :tangle yes
(defun sulami/toggle-maximise-window ()
  "Toggles maximising the current window."
  (interactive)
  (let ((el-reg ?F))
    (if (< winum--window-count 2)
        (jump-to-register el-reg)
      (progn
        (window-configuration-to-register el-reg)
        (delete-other-windows)))))
#+end_src
**** Triple fibonacci windows
:PROPERTIES:
:ID:       17D92B6F-A693-419E-97BA-B65E9057F923
:END:
#+begin_src emacs-lisp :tangle yes
(defun sulami/layout-triple-fib ()
  "Open one window on the left and stacked on the right."
  (interactive)
  (delete-other-windows)
  (split-window-horizontally)
  (select-window (next-window))
  (split-window-vertically))
#+end_src
*** Run a shell command on a region
:PROPERTIES:
:ID:       08BA7079-1270-48D0-8799-77F20BA27C8E
:END:
#+begin_src emacs-lisp :tangle yes
(defun sulami/shell-command-on-region (beg end)
  (interactive "r")
  (if (use-region-p)
      (let ((cmd (read-shell-command "Command: ")))
        (call-process-region beg end cmd t t))
    (message "Select a region first")))
#+end_src
*** Sort words
:PROPERTIES:
:ID:       A213A50B-C7BD-48C3-98FB-C7EE69BB51D0
:END:
#+begin_src emacs-lisp :tangle yes
(defun sulami/sort-words (beg end)
  "Sorts words in region."
  (interactive "r")
  (sort-regexp-fields nil "\\w+" "\\&" beg end))
#+end_src
*** Toggle narrowing
:PROPERTIES:
:ID:       3DED3863-7B42-4E74-92B1-CD47E8A775DB
:END:
#+begin_src emacs-lisp :tangle yes
(defun sulami/toggle-narrow ()
  "Toggles `narrow-to-defun' or `org-narrow-to-subtree'."
  (interactive)
  (if (buffer-narrowed-p)
      (widen)
    (if (eq major-mode 'org-mode)
        (org-narrow-to-subtree)
      (narrow-to-defun))))
#+end_src
*** Open Terminal at current directory
:PROPERTIES:
:ID:       65330242-36F8-4346-97A1-5D494705B676
:END:
Because I don't understand how to be productive with the terminal provides

#+begin_src emacs-lisp :tangle yes
(defun pfif/open-terminal ()
  (interactive)
  (let* ((current-directory (car (last (split-string (pwd) " ")))))
    (shell-command (concat "open -a Terminal " current-directory))))
#+end_src
** Hydra
:PROPERTIES:
:ID:       1F9D4988-AA21-4918-A72A-2A1F7BA038C0
:END:
#+begin_src emacs-lisp :tangle yes
(use-package hydra
  :defer t)
#+end_src
** Which key
:PROPERTIES:
:ID:       7FEEF061-10C5-48AC-9C92-CDBE9E99A6E9
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package which-key
  :hook (after-init . which-key-mode))
#+END_SRC
** Ivy
:PROPERTIES:
:ID:       980ADE26-6F72-403A-9305-E63A5DD5AA5B
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ivy
  :init
  (setq ivy-on-del-error-function #'ignore
        ivy-count-format "(%d/%d) "
        ivy-re-builders-alist '((counsel-projectile-find-file . ivy--regex-fuzzy)
                                (counsel-apropos . ivy--regex-ignore-order)
                                (t . ivy--regex-plus)))
  :config
  (defun sulami/ivy-with-thing-at-point (cmd)
    "Runs an ivy command with the thing at point."
    (let ((ivy-initial-inputs-alist
           (list
            (cons cmd (thing-at-point 'symbol)))))
      (funcall cmd)))
  :general
  (:keymaps 'ivy-minibuffer-map
   "C-w" 'ivy-backward-kill-word)
  :hook (after-init . ivy-mode))

(use-package counsel
  :config/el-patch
  ;; Patching counsel-apropos to skip the apropos step
  (defun counsel-apropos ()
  "Show all matching symbols.
See `apropos' for further information on what is considered
a symbol and how to search for them."
  (interactive)
  (ivy-read "Search for symbol (word list or regexp): " obarray
            :predicate (lambda (sym)
                         (or (fboundp sym)
                             (boundp sym)
                             (facep sym)
                             (symbol-plist sym)))
            :history 'counsel-apropos-history
            :preselect (ivy-thing-at-point)
            :action
            (el-patch-swap
              ;; Original
              (lambda (pattern)
                (when (string= pattern "")
                  (user-error "Please specify a pattern"))
                ;; If the user selected a candidate form the list, we use
                ;; a pattern which matches only the selected symbol.
                (if (memq this-command '(ivy-immediate-done ivy-alt-done))
                    ;; Regexp pattern are passed verbatim, other input is
                    ;; split into words.
                    (if (string= (regexp-quote pattern) pattern)
                        (apropos (split-string pattern "[ \t]+" t))
                      (apropos pattern))
                  (apropos (concat "\\`" pattern "\\'"))))
              ;; Patch
              (lambda (sym-name)
                (helpful-symbol (intern-soft sym-name))))
            :caller 'counsel-apropos))
  :init
  (defun sulami/imenu-goto-function (NAME POSITION &rest REST)
    "Imenu goto function which pushes an evil jump position before
    jumping."
    (evil-set-jump)
    (apply #'imenu-default-goto-function NAME POSITION REST))
  (setq-default imenu-default-goto-function 'sulami/imenu-goto-function)
  :general
  (leader-def
   "b b" 'counsel-switch-buffer
   "f f" 'counsel-find-file
   "f r" 'counsel-recentf
   "h a" 'counsel-apropos
   "j i" 'counsel-semantic-or-imenu)
  (local-leader-def
    :keymaps 'org-mode-map
    "j" 'counsel-org-goto
    "t" '(counsel-org-tag :wk "counsel-org-tag"))
  (general-nmap
    "M-y" 'counsel-yank-pop)
  (general-imap
    :keymaps 'shell-mode-map
    "C-r" 'counsel-shell-history)
  :hook (after-init . counsel-mode))

(use-package swiper
  :config
  (defun sulami/swiper-thing-at-point ()
    (interactive)
    (sulami/ivy-with-thing-at-point 'swiper))
  :general
  (leader-def
   "s s" 'swiper
   "s S" 'sulami/swiper-thing-at-point))

(use-package ivy-prescient
  :hook (ivy-mode . ivy-prescient-mode)
  :config
  (prescient-persist-mode))

(use-package ivy-xref
  :defer t
  :init (if (< emacs-major-version 27)
            (setq xref-show-xrefs-function #'ivy-xref-show-xrefs)
          (setq xref-show-definitions-function #'ivy-xref-show-defs)))

(use-package flyspell-correct-ivy
  :defer t
  :init
  (setq flyspell-correct-interface #'flyspell-correct-ivy)
  :general
  (leader-def
    "s c" 'flyspell-correct-wrapper
    ;; FIXME This doesn't work yet
    "s C" '((lambda ()
              (interactive)
              (let ((current-prefix-arg 4))
                (call-interactively 'flyspell-correct-wrapper)))
            :wk "flyspell-correct-wrapper-rapid")))

(use-package flx
  :defer t)
#+END_SRC
** Company
:PROPERTIES:
:ID:       F8278BDB-4A26-4478-8435-9AF5AA13563A
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package company
  :init
  (setq company-idle-delay .01
        company-global-modes '(not eshell-mode))
  :general
  (general-define-key
   :keymaps 'company-active-map
   "<tab>" 'company-complete-selection
   "TAB" 'company-complete-selection
   "<ret>" nil
   "RET" nil
   "C-n" 'company-select-next
   "C-p" 'company-select-previous
   "C-w" 'evil-delete-backward-word)
  :hook (after-init . global-company-mode))

(use-package company-prescient
  :hook (company-mode . company-prescient-mode))
#+END_SRC
** Yasnippet
:PROPERTIES:
:ID:       93C0ABDB-0953-4AFF-AB8F-FA9320DC2106
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package yasnippet
  :general
  (:keymaps 'yas-minor-mode-map
   "<tab>" nil
   "TAB" nil
   "<ret>" nil
   "RET" nil)
  :hook (after-init . yas-global-mode))

(use-package ivy-yasnippet
  :general
  (general-imap "C-y" 'ivy-yasnippet))

(use-package yasnippet-snippets
  :defer t
  :after (yasnippet))
#+END_SRC
** Parentheses
:PROPERTIES:
:ID:       10F181FE-55E2-4B3B-A412-B8A49F26D417
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package smartparens
  :after (hydra)
  :config
  (require 'smartparens-config)
  (defhydra hydra-wrap (:color blue)
    "wrap"
    ("(" sp-wrap-round)
    ("[" sp-wrap-square)
    ("{" sp-wrap-curly))
  (defhydra hydra-lisp ()
    "lisp"
    ("s" sp-forward-slurp-sexp "slurp")
    ("S" sp-backward-slurp-sexp "slurp backwards")
    ("b" sp-forward-barf-sexp "barf")
    ("B" sp-backward-barf-sexp "barf backwards")
    ("w" hydra-wrap/body "wrap" :color blue)
    ("." nil "quit" :color blue))
  ;; Disable smartparens strict mode when there is a merge conflict
  (add-hook 'smerge-mode-hook
            (lambda ()
              (smartparens-strict-mode -1)
              (evil-cleverparens-mode -1)))
  :general
  (leader-def "k" 'hydra-lisp/body)
  :hook (prog-mode . smartparens-global-mode))


#+END_SRC
** Dumb jump
:PROPERTIES:
:ID:       8C27DEC6-A6AD-4D9E-94CA-C6130AB7D2CE
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dumb-jump
  :after (evil)
  :config
  (setq dumb-jump-selector 'ivy
        dumb-jump-force-searcher 'ag)
  :general
  ;; I am using general-define-key instead of leader-def here, because
  ;; leader-def writes to the "override" keymap, which cannot be overriden
  ;; The override keymap cannot be overriden, but I want to be able to
  ;; override dumb jump with program specific programs
  (local-leader-def 'python-mode
    "j k" (sulami/evil-set-jump-wrapper 'dumb-jump-go)
    "j p" (sulami/evil-set-jump-wrapper 'dumb-jump-go-prompt)))
#+END_SRC
** Avy
:PROPERTIES:
:ID:       30AA2464-B405-4767-9BB5-105831EA9CAC
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package avy
  :general
  (leader-def
    "j J" 'avy-goto-char
    "j j" 'avy-goto-word-or-subword-1
    "j l" 'avy-goto-line))
#+END_SRC
** Highlight TODO
:PROPERTIES:
:ID:       788FF941-1B2A-4819-A508-7E87476E7EB3
:END:
#+begin_src emacs-lisp :tangle yes
(use-package hl-todo
  :defer t
  :hook (after-init . global-hl-todo-mode))
#+end_src
** Highlight symbol
:PROPERTIES:
:ID:       85CAFFCE-A9D5-4351-BF6D-05C0FAC229AC
:END:
I only enable this every now and then.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package auto-highlight-symbol
  :general
  (leader-def "t h" 'auto-highlight-symbol-mode))
#+END_SRC
** Projectile
:PROPERTIES:
:ID:       1F38D75C-383C-4090-A3A6-E17F225FED07
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package projectile
  :init
  (setq projectile-completion-system 'ivy)
  :config
   (defun sulami/projectile-replace ()
    "Search and replace in the whole project."
    (interactive)
    (dired (projectile-project-root) "-alR")
    (let ((file-regex (read-string "Select files with regex: "))
          (from (read-string "Search for: "))
          (to (read-string "Replace with: ")))
      (dired-mark-files-regexp file-regex)
      (dired-do-find-regexp-and-replace from to))
    (projectile-save-project-buffers)
    (with-current-buffer "*xref*"
      (kill-buffer-and-window))
    ; last open file
    (delete-window)
    ; cleanup dired
    (dired-unmark-all-marks)
    (kill-buffer))

  (defun sulami/toggle-project-root-shell ()
    "Opens eshell, if possible in the project root."
    (interactive)
    (if (eq major-mode 'eshell-mode)
        (evil-switch-to-windows-last-buffer)
      (if (projectile-project-p)
          (let* ((eshell-buffer-name (concat "*eshell-" (projectile-project-name) "*")))
            (projectile-with-default-dir (projectile-project-root)
              (eshell)))
        (eshell))))

  ;; Don't do projectile stuff on remote files
  ;; from https://github.com/syl20bnr/spacemacs/issues/11381#issuecomment-481239700
  (defadvice projectile-project-root (around ignore-remote first activate)
    (unless (file-remote-p default-directory) ad-do-it))

  (setq projectile-switch-project-action
        (lambda () (find-file (concat (projectile-project-root) "README.md"))))

  (defun pfif/add-known-projects-in-default-directories ()
    "A function to easily add most of the project on my computer to the known repositories"
    (interactive)
    (let*
        ((directories (list "~/Documents/company_projects" "~/Documents/external_projects/" "~/Documents/personal_projects"))
         (directory-content (seq-reduce (lambda (content directory) (seq-concatenate 'list content (directory-files directory t))) directories (list)))
         (subfolders (seq-filter 'file-directory-p directory-content))
         (subfolders-without-dot (seq-filter (lambda (a) (not (string-match-p (regexp-quote "^.") a))) subfolders)))
      (seq-map (lambda (a) (projectile-add-known-project a)) subfolders-without-dot)
      )
    )

  (defun pfif/clone-company-repository ()
    (interactive)
    (let* ((url (read-from-minibuffer "URL:"))
           (name (car (last (split-string url "/"))))
           (directory (concat "~/Documents/company_projects/" name)))
      (magit-clone-regular url directory '()))
    (pfif/add-known-projects-in-default-directories))
  :general
  (leader-def
    "p r" 'sulami/projectile-replace
    "p d" 'projectile-dired)
  ("s-'" 'sulami/toggle-project-root-shell)
  :hook (after-init . projectile-global-mode))

(use-package counsel-projectile
  :defer t
  :config
  (defun sulami/projectile-rg-thing-at-point ()
    (interactive)
    (let ((counsel-projectile-rg-initial-input (thing-at-point 'symbol)))
      (counsel-projectile-rg)))
  :general
  (leader-def
   "p b" 'counsel-projectile-switch-to-buffer
   "p f" 'counsel-projectile-find-file
   "s p" 'counsel-projectile-rg
   "s P" 'sulami/projectile-rg-thing-at-point))

#+END_SRC
** Perspective
:PROPERTIES:
:ID:       CC2CB9D3-4588-4D7C-B9D2-1A861D56C370
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package perspective
  :config
  (setq persp-show-modestring nil)
  (setq persp-suppress-no-prefix-key-warning t)
  :general
  (leader-def
    "p l" 'persp-switch)
  :hook (after-init . persp-mode))

(use-package persp-projectile
  :defer t
  :after (perspective)
  :init
  (defun sulami/kill-project-perspective ()
    "Kills the current project and then the perspective."
    (interactive)
    (when (projectile-project-p)
      (projectile-kill-buffers))
    (let ((pname (persp-name (persp-curr))))
      (when (and (not (eq "main" pname))
                 (yes-or-no-p (format "Kill perspective %s?"pname)))
        (persp-kill pname)
        (message "Killed perspective %s" pname))))
  :general
  (leader-def
    "p p" 'projectile-persp-switch-project
    "p k" 'sulami/kill-project-perspective))
#+END_SRC
** Winum
:PROPERTIES:
:ID:       D4AEAD0D-D43A-4BC6-9941-57C19F0EFD98
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package winum
  :config
  (setq winum-scope 'frame-local)
  :general
  ("s-1" 'winum-select-window-1
   "s-2" 'winum-select-window-2
   "s-3" 'winum-select-window-3
   "s-4" 'winum-select-window-4
   "s-5" 'winum-select-window-5
   "s-6" 'winum-select-window-6
   "s-7" 'winum-select-window-7
   "s-8" 'winum-select-window-8
   "s-9" 'winum-select-window-9)
  :hook (after-init . winum-mode))
#+END_SRC
** Fill column indicator
:PROPERTIES:
:ID:       8A2C2CDB-B4F6-4B64-90F3-5D8CD05D66F6
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package fill-column-indicator
  :general
  (leader-def "t i" 'fci-mode))
#+END_SRC
** Focus
:PROPERTIES:
:ID:       3E962633-831D-440C-846D-3F3D90643984
:END:
#+begin_src emacs-lisp :tangle yes
(use-package focus
  :general
  (leader-def "t f" 'focus-mode))
#+end_src
** Darkroom
:PROPERTIES:
:ID:       785514FD-8F48-45C6-8D6C-9097B9BA3A29
:END:
#+begin_src emacs-lisp :tangle yes
(use-package darkroom
  :disabled
  :general
  (leader-def "t d" 'darkroom-tentative-mode))
#+end_src
** Magit
:PROPERTIES:
:ID:       EE126D53-A676-45E0-A3BA-F7585C541F56
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package magit
  :custom
  (magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
  :config
  (defun sulami/magit-pull-master ()
    (interactive)
    (magit-git-command-topdir "git pull origin master:master"))
  (transient-append-suffix 'magit-pull "e" '(sulami/magit-pull-master
                                             :key "m"
                                             :description "Pull master"))
  (add-hook 'git-commit-setup-hook 'git-commit-turn-on-flyspell)

  :general
  (leader-def
    "g b" 'magit-blame-addition
    "g s" 'magit-status)
  :init
  (setq magit-completing-read-function 'ivy-completing-read))

(use-package git-link
  :init
  (defun open-git-link-in-browser ()
    (interactive)
    (let ((git-link-open-in-browser t))
      (git-link "origin" (line-number-at-pos) (line-number-at-pos))))
  (defun open-git-repo-in-browser ()
    (interactive)
    (let ((git-link-open-in-browser t))
      (git-link-homepage "origin")))
  :general
  (leader-def
   "g l" 'git-link
   "g L" 'open-git-link-in-browser
   "g r" 'git-link-homepage
   "g R" 'open-git-repo-in-browser))
#+END_SRC
** Flycheck
:PROPERTIES:
:ID:       0FDB0DF6-C522-400E-BF81-0756A52CCEE5
:END:
:config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package flycheck
  :config
  ;; Disable flycheck on-the-fly-checking if the line count exceeds 2000.
  (setq flycheck-check-syntax-automatically
        (if (> (sulami/buffer-line-count) 2000)
            (delete 'idle-change flycheck-check-syntax-automatically)
          (add-to-list 'flycheck-check-syntax-automatically 'idle-change)))
  :general
  (leader-def "t c" 'flycheck-mode)
  :hook ((clojure-mode . flycheck-mode)
         (go-mode . flycheck-mode)
         (python-mode . flycheck-mode)))
#+END_SRC
** Elisp
:PROPERTIES:
:ID:       75ED327F-136F-4BBC-8038-EEFE159B66D9
:END:
#+begin_src emacs-lisp :tangle yes
(local-leader-def
  :keymaps 'emacs-lisp-mode-map
  "e" '(:ignore t :wk "eval")
  "e b" 'eval-buffer
  "e e" 'eval-sexp
  "e f" 'eval-defun
  "e r" 'eval-region)
#+end_src
** Eshell
*** Aliases
:PROPERTIES:
:ID:       9389843A-AFB4-448B-B04D-26F25AA35DE6
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(setq eshell-aliases-file "~/.emacs/aliases")
#+END_SRC
*** Completion
Eshell doesn't do context-aware autocompletion by default and defaults
to completing filenames instead. Luckily we can easily define custom
completion handlers for commands.
**** Sudo
:PROPERTIES:
:ID:       F84D5FE8-B448-4D70-9FAF-B1EDB9F76FE1
:END:
#+begin_src emacs-lisp :tangle yes
(defun pcomplete/sudo ()
  "Completion rules for the `sudo' command."
  (let ((pcomplete-ignore-case t))
    (pcomplete-here (funcall pcomplete-command-completion-function))
    (while (pcomplete-here (pcomplete-entries)))))
#+end_src
** Ediff
*** Ignore whitespace changes
:PROPERTIES:
:ID:       18480E25-6FC9-441A-B36E-15E67D5794B1
:END:
#+begin_src emacs-lisp :tangle yes
(setq ediff-diff-options "-w")
#+end_src
*** Don't create a new frame for the control window
:PROPERTIES:
:ID:       40A8E1D4-1B64-4EDE-AB5A-CFEA90B4B90F
:END:
#+begin_src emacs-lisp :tangle yes
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+end_src
*** Split horizontally by default
:PROPERTIES:
:ID:       F1620BD6-B4A1-464F-B501-36FDFE15F95A
:END:
#+begin_src emacs-lisp :tangle yes
(setq ediff-split-window-function 'split-window-horizontally)
#+end_src
** Dired
*** Enable find-alternate-file
:PROPERTIES:
:ID:       2A2A54CD-A895-4186-83CF-823951DD1D69
:END:
#+begin_src emacs-lisp :tangle yes
(put 'dired-find-alternate-file 'disabled nil)
#+end_src
** Helpful
:PROPERTIES:
:ID:       63BD449B-1DB0-43E4-B918-04A4620B426C
:END:
#+begin_src emacs-lisp :tangle yes
(use-package helpful
  :commands (helpful-symbol helpful-key)
  :general
  (leader-def
    "h k" 'helpful-key))
#+end_src
** Esup
:PROPERTIES:
:ID:       386C73B6-09CC-4EEC-AA6E-B152E973D076
:END:
This allows me to benchmark Emacs startup.
#+begin_src emacs-lisp :tangle yes
(use-package esup
  :disabled)
#+end_src
** Restclient
:PROPERTIES:
:ID:       C56EA63C-2B60-4DC4-867C-93A51EE3DD79
:END:
#+begin_src emacs-lisp :tangle yes
(use-package restclient
  :mode (("\\.http\\'" . restclient-mode))
  :general
  (local-leader-def
    :keymaps 'restclient-mode-map
    "c" 'restclient-copy-curl-command
    "r" 'restclient-http-send-current-raw
    "s" 'restclient-http-send-current-stay-in-window
    "S" 'restclient-http-send-current))
#+end_src
** Atomic
:PROPERTIES:
:ID:       EB96D705-3096-4289-A378-11A62395C0BC
:END:
#+begin_src emacs-lisp :tangle yes
(use-package atomic-chrome
  :init
  (setq atomic-chrome-default-major-mode 'markdown-mode
        atomic-chrome-buffer-open-style 'frame)
  :general
  (local-leader-def
    :keymaps 'atomic-chrome-edit-mode-map
    "q" 'atomic-chrome-close-current-buffer)
  :hook ((after-init . atomic-chrome-start-server)
         (atomic-chrome-edit-done . delete-frame)))
#+end_src
** LSP
:PROPERTIES:
:ID:       AA4D069E-1C41-44EB-B846-32D677DFF1E7
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package lsp-mode
  :config
  (defun pfif/auto-format-on-save ()
    (when (equal major-mode 'go-mode)
      (lsp-format-buffer)))
  (add-hook 'before-save-hook 'pfif/auto-format-on-save)

  (setq lsp-ui-doc-enable nil)
  (setq lsp-dart-sdk-dir "/usr/local/Cellar/dart/2.8.2/libexec/")
  (setq lsp-eslint-enable t)
  :hook (
  (go-mode . lsp)
  (dart-mode . lsp)
  (js-mode . lsp)
  (rust-mode . lsp)
  )
  :general
  (local-leader-def 'lsp-mode-map
    "r" '(:ignore t :wk "rename")
    "r r" 'lsp-rename
    "j" '(:ignore t :wk "jump")
    "j k" 'lsp-find-definition
    "j K" 'lsp-ui-peek-find-definitions
    "j r" 'lsp-ui-peek-find-references
    "j R" 'lsp-find-references
    "d" '(:ignore t :wk "docs")
    "d d" 'lsp-describe-thing-at-point
    "l" '(:ignore t :wk "lsp")
    "l q" 'lsp-shutdown-workspace
    "l R" 'lsp-restart-workspace
    "f" 'lsp-eslint-fix-all
    ))

(use-package company-lsp
  :disabled
)

(use-package lsp-ui)
(use-package lsp-ivy)
(use-package lsp-treemacs)
#+END_SRC
** Clojure
:PROPERTIES:
:ID:       176CFA1D-25F0-4014-A473-454E00A56C16
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package clojure-mode
  :defer t)

(use-package cider
  :defer t
  :hook (clojure-mode . cider-mode)
  :init
  (setq cider-auto-mode nil)
  :config
  (defun sulami/cider-debug-defun-at-point ()
    "Set an implicit breakpoint and load the function at point."
    (interactive)
    (let ((current-prefix-arg '(4)))
      (call-interactively 'cider-eval-defun-at-point)))
  :general
  (local-leader-def
    :keymaps 'clojure-mode-map
    "c" 'cider-connect
    "j" 'cider-jack-in
    "q" 'cider-quit
    "s" 'cider-scratch
    "x" 'cider-ns-reload-all
    "e" '(:ignore t :wk "eval")
    "e b" 'cider-eval-buffer
    "e d" 'sulami/cider-debug-defun-at-point
    "e e" 'cider-eval-last-sexp
    "e f" 'cider-eval-defun-at-point
    "e r" 'cider-eval-region
    "h" '(:ignore t :wk "help")
    "h a" 'cider-apropos
    "h A" 'cider-apropos-documentation
    "h d" 'cider-doc
    "h i" 'cider-inspect-last-result
    "h w" 'cider-docview-clojuredocs-web
    "r" '(:ignore t :wk "repl")
    "r f" 'cider-insert-defun-in-repl
    "r n" 'cider-repl-set-ns
    "r r" 'cider-switch-to-repl-buffer
    "t" '(:ignore t :wk "test")
    "t b" 'cider-test-show-report
    "t f" 'cider-test-rerun-failed-tests
    "t l" 'cider-test-run-loaded-tests
    "t n" 'cider-test-run-ns-tests
    "t p" 'cider-test-run-project-tests
    "t t" 'cider-test-run-test))

(use-package flycheck-clj-kondo
  :defer t
  :hook (clojure-mode . (lambda () (require 'flycheck-clj-kondo))))

;; TODO this should probably go somewhere else, if anywhere
(defun sulami/clojure-thread-last ()
  "Unwraps an onion of functions into a thread-last macro.

Place point on the outer-most opening parenthesis to start:
|(f (g (h x))) => (->> x (h) (g) (f))"
  (interactive)
  (let ((start (point))
        (depth 0))

    (while (let ((pos (point)))
             (sp-down-sexp)
             (not (= pos (point))))
      (setq depth (+ 1 depth)))

    (goto-char start)
    (sp-down-sexp)

    (--dotimes depth
      (sp-forward-barf-sexp)
      (left-char)
      (sp-kill-sexp)
      (right-char))

    (re-search-forward "\n" nil t)
    (left-char)

    (--each (-take depth kill-ring)
      (insert (format " %s" it)))

    (goto-char start)
    (insert "(->>) ")
    (goto-char (+ 1 start))
    (sp-forward-slurp-sexp (+ 1 depth))
    (goto-char start)))
#+END_SRC
** Dart
:PROPERTIES:
:ID:       C456887D-8186-47F7-A27C-962538E2302C
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dart-mode)
#+END_SRC
** Haskell
:PROPERTIES:
:ID:       785BE027-4535-476E-9CCE-6D8EAF2D41EA
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package haskell-mode
  :defer t)

;;; Fix indentation when using o/O in Haskell
;(defun haskell-evil-open-above ()
;  (interactive)
;  (evil-digit-argument-or-evil-beginning-of-line)
;  (haskell-indentation-newline-and-indent)
;  (evil-previous-line)
;  (haskell-indentation-indent-line)
;  (evil-append-line nil))
;
;(defun haskell-evil-open-below ()
;  (interactive)
;  (evil-append-line nil)
;  (haskell-indentation-newline-and-indent))
;
;(evil-define-key 'normal haskell-mode-map
;  "o" 'haskell-evil-open-below
;  "O" 'haskell-evil-open-above)
#+END_SRC
** Rust
:PROPERTIES:
:ID:       57CD84CD-240D-40F6-A119-43A569C9B7A5
:END:
#+begin_src emacs-lisp :tangle yes
(use-package rust-mode
  :defer t)
#+end_src
** Python
:PROPERTIES:
:ID:       B30B162B-9055-47D2-8A0A-40055766244B
:END:
#+begin_src emacs-lisp :tangle yes
(use-package elpy
  :defer t
  :hook (python-mode . elpy-enable)
  :config
  (defun pfif/run-all-tests-elpy ()
    (interactive)
    (let ((current-prefix-arg '(4)))
      (call-interactively 'elpy-test))
    )
  (defun pfif/pyvenv-workon ()
    (flycheck-reset-enabled-checker 'python-flake8)
    (flycheck-reset-enabled-checker 'python-mypy)
    )
  (add-hook 'pyvenv-post-deactivate-hooks 'pfif/pyvenv-workon)
  (elpy-shell-toggle-dedicated-shell 1)

  (defun pfif/activate-poetry-env ()
    (interactive)
    (let ((venv-path (shell-command-to-string "poetry env info -p")))
      (message "Activating poetry venv: %s" venv-path)
      (pyvenv-activate venv-path)
      )
    )

  :general
  (local-leader-def
    :keymaps 'python-mode-map
    "t" '(:ignore t :wk "test")
    "t t" 'elpy-test
    "t a" 'pfif/run-all-tests-elpy
    "j" '(:ignore t :wk "jump")
    "j k" 'elpy-goto-definition
    "v" '(:ignore t :wk "virtual environment")
    "v w" 'pyvenv-workon
    "v p" 'pfif/activate-poetry-env
    "v d" 'pyvenv-deactivate
    "s" '(:ignore t :wk "Shell")
    "s r" 'elpy-shell-switch-to-shell
    "s k" 'elpy-shell-kill
    "r" '(:ignore t :wk "Run")
    "r b" 'elpy-shell-send-region-or-buffer
    "d" '(:ignore t :wk "Docs")
    "d d" 'elpy-doc
    ))
#+end_src
** Javascript / typescript
#+begin_src emacs-lisp :tangle yes
(add-to-list 'auto-mode-alist '("\\.tsx?$" . js-mode))
#+end_src
** Golang
:PROPERTIES:
:ID:       618EDA7C-FA1F-45B1-B2B8-66BAE3D9AF6E
:END:
#+begin_src emacs-lisp :tangle yes
(use-package go-mode
  :hook
  (go-mode . pfif/enable-tabs)
  :general
  (local-leader-def 'go-mode-map
    "e" '(:ignore t :wk "Exec")
    "e b" 'go-run
    )
  )

(use-package gotest
  :config/el-patch
  (defun go-test-current-project ()
    "Launch go test on the current project."
    (interactive)
    (if (go-test--is-gb-project)
        (go-test--gb-start "all -test.v=true")
      (let ((packages (cl-remove-if (lambda (s) (s-contains? "/vendor/" s))
                                    (s-split "\n"
                                             (shell-command-to-string (el-patch-swap
                                                                        ;; Original
                                                                        "go list ./..."
                                                                        ;; Replacement
                                                                        (let ((suffix-to-directory (if (and (projectile-project-root) (seq-contains (directory-files (projectile-project-root)) "lambda")) "lambda" "")))
                                                                          (format "go list %s%s/..." (projectile-project-root) suffix-to-directory))
                                                                        ))))))
        (go-test--go-test (s-join " " packages)))))

  (defun go-test--get-program (args &optional env)
    "Return the command to launch unit test.
`ARGS' corresponds to go command line arguments.
When `ENV' concatenate before command."
    (if env
        (s-concat env " " go-command (el-patch-swap
                                       ;; Original
                                       " test "
                                       ;; Replacement
                                       " test -gcflags=-l "
                                       ) args)
      (s-concat go-command (el-patch-swap
                                       ;; Original
                                       " test "
                                       ;; Replacement
                                       " test -gcflags=-l "
                                       ) args)))

  :general
  (local-leader-def 'go-mode-map
    "t" '(:ignore t :wk "test")
    "t t" 'go-test-current-test
    "t a" 'go-test-current-project
    "t f" 'go-test-current-file
    ))
#+end_src
** Markdown
:PROPERTIES:
:ID:       AC79586E-DB5C-41E2-905E-1E9B93C56366
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package markdown-mode
  :config
  (add-hook 'markdown-mode-hook 'orgtbl-mode)
  ;; :general
  ;; (local-leader-def
  ;;   :keymap markdown-mode-map
  ;;   "i" 'markdown-insert-italic
  ;;   "b" 'markdown-insert-bold
  ;;   "c" 'markdown-insert-code
  ;;   "p" 'markdown-preview
  ;;   )
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)))
#+END_SRC
** YAML
:PROPERTIES:
:ID:       08367FEB-F414-43A6-96BF-D4427E43FA13
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package yaml-mode
  :defer t)
#+END_SRC
** Docker
:PROPERTIES:
:ID:       FBAA5DA4-9EC4-4D52-BA1E-752CF756D3E2
:END:
#+begin_src emacs-lisp :tangle yes
(use-package dockerfile-mode)
#+end_src
** JSON
:PROPERTIES:
:ID:       4660F9EF-C7E4-4DDD-A846-FDD68B451867
:END:
#+begin_src emacs-lisp :tangle yes
;; Indent by 2 spaces, if we ever get there
(setq js2-basic-offset 2)
#+end_src
** Protobuf
:PROPERTIES:
:ID:       899D5312-7C61-49A1-8AEA-B89CAD9A8D4B
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package protobuf-mode
  :defer t)
#+END_SRC
** Done
:PROPERTIES:
:ID:       F99E675C-9C6B-4683-A0EF-DB9CEF128307
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'emacs-startup-hook
          (lambda ()
            (let ((pkg-count (length (hash-table-keys straight--success-cache)))
                  (startup-time (float-time (time-subtract after-init-time before-init-time))))
              (message (format "Startup complete, loaded %d packages in %.2fs"
                               pkg-count
                               startup-time)))))
#+END_SRC
** jq mode
:PROPERTIES:
:ID:       F41CA92E-D25F-4CC6-B8D1-4FE0DD54A24F
:END:
#+begin_src emacs-lisp :tangle yes
(use-package jq-mode)
#+end_src
** Plant UML
#+begin_src emacs-lisp :tangle yes
(use-package plantuml-mode
  :config
  (setq plantuml-default-exec-mode 'executable)
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  (org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))
)

(setq org-plantuml-jar-path "~/Downloads/plantuml.jar")
#+end_src
** TODO Split up headings
** TODO emacsclient setup
I'd like to have emacsclient open in a new, clean frame, and clean up
upon termination.
** Terraform
:PROPERTIES:
:ID:       a56959fe-0e2f-49d1-beca-9259146f7d89
:END:
#+begin_src emacs-lisp :tangle yes
(use-package terraform-mode)
#+end_src
** Litteral calc mode
:PROPERTIES:
:ID:       301c6e65-b0b7-473d-b104-e4b03ab9df16
:END:
#+begin_src emacs-lisp :tangle yes
(use-package literate-calc-mode
  :ensure t)
#+end_src
** COMMENT Fcitx
:PROPERTIES:
:ID:       f5130b4d-5b5a-459b-8941-57d977eb3c98
:END:
#+begin_src emacs-lisp :tangle yes
(use-package fcitx
  :config
  (fcitx-aggressive-setup)
  (setq fcitx-use-dbus t))
#+end_src
** Fountain
:PROPERTIES:
:ID:       da33a863-3a50-4d77-9d53-d1cd5d24ec86
:END:
#+begin_src emacs-lisp :tangle yes
(use-package fountain-mode)
#+end_src
** Undo system
#+begin_src emacs-lisp :tangle yes
(use-package undo-fu
  :defer t
)
#+end_src
** OPA
#+begin_src emacs-lisp :tangle yes
(use-package rego-mode
  :ensure t)
#+end_src
** Mermaid
#+begin_src emacs-lisp :tangle yes
(use-package mermaid-mode
  :ensure t)
#+end_src

** vterm
#+begin_src emacs-lisp :tangle yes
(use-package vterm
  :ensure t)

(use-package multi-vterm
  :ensure t
  :config
  (setq vterm-max-scrollback 100000)
  :config/el-patch
  (defun multi-vterm-project ()
  "Create new vterm buffer."
  (interactive)
  (if (multi-vterm-project-root)
      (if (buffer-live-p (get-buffer (multi-vterm-project-get-buffer-name)))
          (if (string-equal (buffer-name (current-buffer)) (multi-vterm-project-get-buffer-name))
              (delete-window (selected-window))
            ((el-patch-swap
               ;; Originl
               switch-to-buffer-other-window
               ;; New
               switch-to-buffer) (multi-vterm-project-get-buffer-name)))
        (let* ((vterm-buffer (multi-vterm-get-buffer 'project))
               (multi-vterm-buffer-list (nconc multi-vterm-buffer-list (list vterm-buffer))))
          (set-buffer vterm-buffer)
          (multi-vterm-internal)
          ((el-patch-swap
               ;; Originl
               switch-to-buffer-other-window
               ;; New
               switch-to-buffer) vterm-buffer)))
    (message "This file is not in a project")))
  :general
  (leader-def
    "p s" 'multi-vterm-project)
)
#+end_src

** ChatGPT
The robots have come. All hail the robots.
#+begin_src emacs-lisp :tangle yes
(use-package copilot
  :straight (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))
  :ensure t
  :custom
  (copilot-idle-delay 1)
  :general
  (general-imap
    :keymaps 'copilot-mode-map
    "C-j" #'copilot-complete
    "C-<return>" #'copilot-accept-completion
    "C-k" #'copilot-previous-completion
    "C-l" #'copilot-next-completion))
#+end_src
